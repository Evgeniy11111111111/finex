"use strict";

var burgerBtn = document.querySelector(".header__burger");
var menuBurger = document.querySelector(".header__menu");
var headerSvg = document.querySelector(".header__svg");
burgerBtn.addEventListener("click", function () {
  menuBurger.classList.toggle('active');
  burgerBtn.classList.toggle("active");
  document.body.classList.toggle("lock");

  if (menuBurger.classList.contains("active")) {
    setTimeout(function () {
      headerSvg.classList.add("active");
    }, 200);
  } else {
    headerSvg.classList.remove("active");
  }
});

if (window.innerWidth < 992) {
  var menuItemLink = document.querySelectorAll(".header__item-link");
  menuItemLink.forEach(function (elem) {
    elem.addEventListener("click", function (e) {
      e.preventDefault();
      elem.style.transform = "translateX(".concat(elem.parentElement.clientWidth / 2 - elem.clientWidth / 2, "px)");
      elem.parentElement.classList.add("active");
      document.body.classList.remove("lock");
      setTimeout(function () {
        window.location.href = elem.getAttribute("href");
        menuBurger.classList.remove('active');
        burgerBtn.classList.remove('active');
        headerSvg.classList.remove('active');
      }, 500);
      setTimeout(function () {
        elem.style.transform = "translateX(0)";
        elem.parentElement.classList.remove("active");
      }, 1000);
    });
  });
}

var form = document.querySelector(".contacts__form");
var successMessage = document.querySelector(".contacts__success");
form.addEventListener("submit", function (e) {
  e.preventDefault();
  successMessage.classList.add("active");
});
var inputTel = document.querySelectorAll(".contacts__input");
inputTel.forEach(function (elem) {
  if (elem.type === "tel") {
    elem.addEventListener("input", function (e) {
      inputPhone(e);
    });
    elem.addEventListener("keydown", function (e) {
      onePhoneKeyDown(e);
    });
  }
});

function regPhone(input) {
  return input.value.replace(/\D/g, '');
}

function inputPhone(e) {
  var input = e.target;
  var inputNumberValue = regPhone(input);
  var formattedInputValue = '';
  var selectionStart = input.selectionStart; // Если в инпут введены симовлы не соответсвующие регулярки, то значение инпута становится пустым

  if (!inputNumberValue) return input.value = ''; // В этой части я не совсем понимаю что происходит

  if (input.value.length != selectionStart) {
    if (e.data && /\D/g.test(e.data)) {
      input.value = inputNumberValue;
    }

    return;
  }

  if (['7', '8', '9'].includes(inputNumberValue[0])) {
    // Если первая цифра девять, тогда мы заменяем первую цифру на 7 и девятку делаем второй цифрой
    if (inputNumberValue[0] == '9') inputNumberValue = '7' + inputNumberValue;
    if (inputNumberValue[0] == '8') inputNumberValue = '7'; // Если первая цифра 7, тогда значение инпута начинается с +7, если первая цифра 8, тогда значение начинается с 8

    var firstSymbol = '+7';
    formattedInputValue = firstSymbol + ' '; // Если в инпуте больше одной цифры добавляем скобку открытия и так далее

    if (inputNumberValue.length > 1) {
      formattedInputValue += '(' + inputNumberValue.substring(1, 4);
    }

    if (inputNumberValue.length >= 5) {
      formattedInputValue += ') ' + inputNumberValue.substring(4, 7);
    }

    if (inputNumberValue.length >= 8) {
      formattedInputValue += '-' + inputNumberValue.substring(7, 9);
    }

    if (inputNumberValue.length >= 10) {
      formattedInputValue += '-' + inputNumberValue.substring(9, 11);
    }
  } else {
    //Если вводимое число не 7, 8 или 9 тогда добавляем +и добавляем введеное число
    formattedInputValue = '+7 (9' + inputNumberValue;
  }

  input.value = formattedInputValue;
}

function onePhoneKeyDown(e) {
  var input = e.target;

  if (regPhone(input).length == 1 && e.keyCode === 8) {
    input.value = '';
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
